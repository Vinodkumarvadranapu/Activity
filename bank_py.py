# -*- coding: utf-8 -*-
"""bank.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k3c3uzCf2QdRX__Vmkc0inNQG6wqt-kS
"""

import numpy as np
import pandas as pd

data = pd.read_excel("/content/ bankdata.xlsx")

data.head()

data.tail()

data.shape

data.dtypes

data.drop(["ID","ZIP Code"],axis=1,inplace=True)

catt_attr = (["Family","Education","Securities Account","CD Account","Online","CreditCard","Personal Loan"])

data[catt_attr]=data[catt_attr].astype('category')

data.dtypes

data.isna().sum()

from sklearn.preprocessing import LabelEncoder

le=LabelEncoder()

data[catt_attr]=data[catt_attr].apply(le.fit_transform)

y=data["Personal Loan"]
X=data.drop('Personal Loan',axis=1)

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y, test_size=0.2,random_state=123)

num_attr=X_train.select_dtypes(['int64','float64']).columns
num_attr

from sklearn.preprocessing import StandardScaler

scaler=StandardScaler()

X_train[num_attr]=scaler.fit_transform(X_train[num_attr])

X_test[num_attr]=scaler.fit_transform(X_test[num_attr])

"""MODEL 1 LOGISTIC REG"""

from sklearn.linear_model import LogisticRegression

LR=LogisticRegression()

LR.fit(X_train,y_train)

X_train_pred=LR.predict(X_train)
X_test_pred=LR.predict(X_test)

from sklearn.metrics import accuracy_score,recall_score,precision_score,f1_score

print(accuracy_score(y_train,X_train_pred))
print(recall_score(y_train,X_train_pred))
print(f1_score(y_train,X_train_pred))

print(accuracy_score(y_test,X_test_pred))
print(recall_score(y_test,X_test_pred))
print(f1_score(y_test,X_test_pred))

"""MODEL 2 DECISION TREE"""

from sklearn.tree import DecisionTreeClassifier

DT=DecisionTreeClassifier()

DT.fit(X_train,y_train)

X_train_pred=LR.predict(X_train)
X_test_pred=LR.predict(X_test)

print(accuracy_score(y_train,X_train_pred))
print(recall_score(y_train,X_train_pred))
print(f1_score(y_train,X_train_pred))

print(accuracy_score(y_test,X_test_pred))
print(recall_score(y_test,X_test_pred))
print(f1_score(y_test,X_test_pred))

"""MODEL 3 RAND FOREST"""

from sklearn.ensemble import RandomForestClassifier

RF=RandomForestClassifier()

RF.fit(X_train,y_train)

X_train_pred=RF.predict(X_train)
X_test_pred=RF.predict(X_test)

print(accuracy_score(y_train,X_train_pred))
print(recall_score(y_train,X_train_pred))
print(f1_score(y_train,X_train_pred))

print(accuracy_score(y_test,X_test_pred))
print(recall_score(y_test,X_test_pred))
print(f1_score(y_test,X_test_pred))

"""MODEL 4 SVM"""

from sklearn import svm 
model=svm.SVC(C=0.000001,kernel='linear')
model.fit(X_train,y_train)

model.coef_

model.intercept_

X_train_pred=model.predict(X_train)
X_test_pred=model.predict(X_test)

print(accuracy_score(y_train,X_train_pred))
print(recall_score(y_train,X_train_pred))
print(f1_score(y_train,X_train_pred))

print(accuracy_score(y_test,X_test_pred))
print(recall_score(y_test,X_test_pred))
print(f1_score(y_test,X_test_pred))

